#!/usr/bin/env python

# Copyright (c) 2012 Martin Garcia (newluxfero@gmail.com)
# Copyright (c) 2014 Geoff Stokes (geoff@geoffstokes.net)
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.

from x256 import x256
import argparse
import Image
from sys import version as pythonver

if pythonver > '3':
	from io import BytesIO as StringIO
	import urllib.request as urllib
else:
	import urllib
	try:
		from cStringIO import StringIO
	except ImportError:
		from StringIO import StringIO


def render(picture, columns=80, gradual=False, interpolate=False):
	"""
	Render images on the terminal
	"""
	try:
		url = urllib.urlopen(picture)
		imageData = StringIO(url.read())
		image = Image.open(imageData)
		url.close()
	except:
		image = Image.open(picture)

	image.mode == 'RGBA'
	width, height = image.size

	colratio = float(columns) / float(width)
	
	rows = int(round(height * colratio / 2))

	pixels = image.resize((columns, rows), (Image.ANTIALIAS if interpolate else Image.NEAREST)).load()

	buffer = ''
	y = 0
	while (y < rows):

		if gradual:
			buffer = ''

		x = 0

		while (x < columns):

			i = round(x - 0.5) if x != 0 else x
			j = round(y - 0.5) if y != 0 else y

			if (len(pixels[i, j]) == 3) or (pixels[i, j][3] > 64):

				color = x256.from_rgb(list(pixels[i, j])[0:3])
				buffer += '\033[48;5;%dm \033[0m' % color

			else:

				buffer += ' '

			x += 1

		if gradual:
			print(buffer)
		elif (y < rows - 1):
			buffer += '\n'

		y += 1

	if not gradual:
		print(buffer)


if __name__ == "__main__":

	parser = argparse.ArgumentParser(description='Render images on the terminal')
	parser.add_argument('pictures', metavar='picture', type=str, nargs='+', help='file path or URL to an image file')
	parser.add_argument('-c', '--columns', metavar='columns', default=80, type=int, help="number of columns to render in")
	parser.add_argument('-g', '--gradual',  action='store_true', help="render gradually, rather than rendering once finished")
	parser.add_argument('-i', '--interpolate',  action='store_true', help="interpolate image, rather than using nearest-neighbour scaling")

	options = parser.parse_args()

	for picture in options.pictures:
		render(picture, options.columns, options.gradual, options.interpolate)
