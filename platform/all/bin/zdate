#!/usr/bin/env zsh

# zdate
# zsh-powered strftime(3) date formatting with preset formats.
# Uses BSD-style strftime(3) formatting strings (yes, even on GNU systems)

zmodload zsh/datetime

# Show help when given no arguments
if [[ $# = 0 ]]; then
	1=--help
fi

# Preset Date Formats
case $1 in
	beats|b)
		format="@%i"
		;;
	short|s)
		format="%L:%M %P"
		;;
	medium|m)
		format="%a %L:%M %P"
		;;
	long|l)
		format="%a %b %f %L:%M %P"
		;;
	full|f)
		format="%A, %B %f %G %L:%M:%S %P"
		;;
	8601|iso|i)
		format="%Y-%m-%dT%H:%M:%S%z"
		;;
	--help|-h)
		echo "usage: $(basename $0) <format> [<datestamp>]"
		echo
		echo "Values for <format>:"
		echo "    beats, b      Output the current Swatch Internet Time (e.g. \`@778\`)"
		echo "    short, s      Short date (e.g. \`9:41 am\`)"
		echo "    medium, m     Medium date (e.g. \`Tue 9:41 am\`)"
		echo "    long, l       Long date (e.g. \`Tue Jan 9 9:41 am\`)"
		echo "    full, f       Full date (e.g. \`Tuesday, January 9 2007 9:41:00 am\`)"
		echo "    8601, iso, i  ISO 8601 date (e.g. \`2007-01-09T09:41:00-0800\`)"
		echo
		echo "Custom formats may also be specified, using BSD-style strftime(3) formats,"
		echo "with the following additions;"
		echo "    %i            Swatch Internet Time @Beats"
		echo "    %P            %P is converted into %p when GNU-style strftime(3) is detected."
		exit
		;;
	*)
		format=$1
		;;
esac

# Detect Meridiem Format String and override
meridiem=$(strftime "%P" "$EPOCHSECONDS")
meridiem=${${meridiem/P/}/A/}

if [[ -z "$meridiem" ]]; then
	# GNU strftime(3)
	format=${format/"%P"/"%p"}
fi

timestamp=$EPOCHSECONDS

if [[ $# -gt 1 ]]; then
	timestamp=$2
fi

# Swatch Internet Time (Beats)

function beats() {

	zmodload zsh/mathfunc
	integer BEATS

	((BEATS=floor(($(strftime "%S" "$1")+$(strftime "%M" "$1")*60+$(strftime "%H" "$1")*3600)/86.4)))

	printf $BEATS

}

if [[ $format = *%i* ]]; then
	format=${format/"%i"/"$(TZ=Etc/GMT-1 beats $timestamp)"}
fi

strftime "$format" "$timestamp"
