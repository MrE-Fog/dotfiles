#!/bin/bash
# Geoff Stokes <http://github.com/geoffstokes/dotfiles>

# ==============================================================================
# VARIABLES & BASIC CONFIGURATION
# ==============================================================================

# set a variable with the home dir's location (adding "~" to PATH doesn't work)
export HOME=~

# kernel name
export UNAME="$($HOME/dotfiles/platform/all/bin/nuname)"

# coreutils type
COREUTILS="OTHER"

# presence of additional g-prefixed coreutils
GCOREUTILS="NO"

# detect coreutils' type by throwing --color=auto at GNU ls
if ls --color=auto ~ >/dev/null 2>&1; then

  COREUTILS="GNU"

else

  # BSD ls errors out when passed `--color`, GNU ls doesn't seem to care about unexpected arguments

  COREUTILS="BSD"

  # detect additional GNU Coreutils (i.e. `brew install coreutils` on OS X)
  if gls > /dev/null 2>&1; then
    GCOREUTILS="YES"
  fi

fi

# default editor is vim
export EDITOR=vim

# complete hostnames from this file
export HOSTFILE=~/.ssh/known_hosts

# ----------------------------------------------------------------------
#  SHELL OPTIONS
# ----------------------------------------------------------------------

# shell opts. see bash(1) for details
shopt -s cdspell >/dev/null 2>&1
shopt -s extglob >/dev/null 2>&1
shopt -s histappend >/dev/null 2>&1
shopt -s hostcomplete >/dev/null 2>&1
shopt -s interactive_comments >/dev/null 2>&1
shopt -u mailwarn >/dev/null 2>&1
shopt -s no_empty_cmd_completion >/dev/null 2>&1

# fuck that you have new mail shit
unset MAILCHECK

# default umask
umask 0022

# platform & user shortcut functions
function userIsRoot {
  [ "$(env whoami)" = "root" ]
}
function platformIsDarwin {
  [ "$UNAME" = "darwin" ]
}
function platformIsLinux {
  [ "$UNAME" = "linux" ]
}
function platformIsCygwin {
  [ "$UNAME" = "cygwin" ]
}
function sessionIsLocal {
  [[ $SSH_CONNECTION == '' && $TERM != "screen"* ]]
}

# ----------------------------------------------------------------------
#  COLOUR DEFINITIONS
# ----------------------------------------------------------------------

COLOR_DEFAULT="\[\033[0m\]" # Terminal Default Colours
SCREEN_ESC="\[\033k\033\134\]" # Screen Escape

# root gets a cyan prompt by default
if userIsRoot; then
  COLOR_BACKGROUND="\[\033[0;46;1m\]" # White on Cyan
  COLOR_REGULAR="\[\033[0;36m\]" # Cyan
  COLOR_BOLD="\[\033[0;36;1m\]" # Bold Cyan
else
  COLOR_BACKGROUND="\[\033[0;45;1m\]" # White on Magenta
  COLOR_REGULAR="\[\033[0;35m\]" # Magenta
  COLOR_BOLD="\[\033[0;35;1m\]" # Bold Magenta
fi

# ----------------------------------------------------------------------
#  PATH
# ----------------------------------------------------------------------

# bring in system bashrc
test -r /etc/bashrc &&
      . /etc/bashrc

# we want the various sbins on the path along with /usr/local/bin
PATH="$PATH:/usr/local/sbin:/usr/sbin:/sbin"
PATH="/usr/local/bin:$PATH"

# bring in NPM
test -d "/usr/local/share/npm/bin" &&
PATH="$PATH:/usr/local/share/npm/bin"

# All-OS user bin
test -d "$HOME/dotfiles/platform/all/bin" &&
PATH="$HOME/dotfiles/platform/all/bin:$PATH"

# Allow platform-based overrides
test -d "$HOME/dotfiles/platform/$UNAME/bin" &&
PATH="$HOME/dotfiles/platform/$UNAME/bin:$PATH"

# Allow platform-based overrides
test -d "$HOME/dotfiles/platform/all-but-!($UNAME)/bin" &&
PATH="$HOME/dotfiles/platform/all-but-!($UNAME)/bin:$PATH"

function platformbindir {
  if [ -d "$HOME/dotfiles/platform/$UNAME/bin" ]; then
    echo "$HOME/dotfiles/platform/$UNAME/bin"
  else
    mkdir -p "$HOME/dotfiles/platform/$UNAME/bin" && PATH="$HOME/dotfiles/platform/$UNAME/bin:$PATH" && echo "$HOME/dotfiles/platform/$UNAME/bin:$PATH"
  fi
}

# put ~/bin on PATH if you have it
test -d "$HOME/bin" &&
PATH="$HOME/bin:$PATH"

# ----------------------------------------------------------------------
#  WINDOW TITLE
# ----------------------------------------------------------------------

# set window title
function title() {
  echo -ne "\033]0;$@\007";
}
function title_git() {
  title "${PWD} $(_git_prompt) $@"
}

# ----------------------------------------------------------------------
#  PROMPT
# ----------------------------------------------------------------------

# checks the current repo's email against the global value; if they don't match, show the repo's value.
function _git_prompt_local_email {
  [[ $(command git config user.email) != $(command git config --global user.email) ]] && echo "$(command git config user.email) "
}
# detect if there are changes to the local working copy
function _git_prompt_dirty_marker {
  [ -z "$(command git status -s 2> /dev/null)" ] || echo " ●"
}
# Serves two functions; shows the current branch (in place of `\1`),
# and if `git branch` returns a failure code, outputs nothing (i.e. hides the git prompt, and never calls the sub-functions).
function _git_prompt {
  command git branch --no-color 2> /dev/null | sed -e '/^[^*]/d' -e "s/* \(.*\)/✱ $(_git_prompt_local_email)⌥ \1$(_git_prompt_dirty_marker)/"
}


# Hide hostname in prompt while inside a GNU Screen session on Linux.
# (Hostname is always shown in hardstatus inside Screen)
# TODO:
# - Expand this to allow for tmux
# - Find a way to implement similar behaviour on OS X (Cygwin/MSYS should be the same as this)
# - Show hostname if inside a remote ssh session (Maybe?)

# "athost" variable is for disabling hostname in certain situations
ATHOST="@\h"

if platformIsLinux; then
  if [[ $(cat /proc/$PPID/cmdline) == SCREEN* ]] ; then
    ATHOST=""
  fi
fi

# prompt setup functions
# Reference for escape sequences: http://www.ibm.com/developerworks/linux/library/l-tip-prompt/
function prompt_pwd() {
  # This sets up the newPWD value which is used in the prompt and the title.
  # It is run after every command by the PROMPT_COMMAND variable.
  newPWD="${PWD} $(_git_prompt)"
}
function prompt_color() {
  PROMPT_COMMAND='prompt_pwd;history -a;title_git'

  # Set up prompt.
  PS1="${COLOR_BACKGROUND}\u${ATHOST}${COLOR_REGULAR}:\w\n${COLOR_BOLD}>${COLOR_DEFAULT} "

  # Replace "\w" with the newPWD variable set in prompt_pwd
  # (This syntax is evaluated when the prompt is rendered; the one above is evaluated once)
  # TODO: Investigate why.
  PS1=${PS1//\\w/\$\{newPWD\}}

  # multi-line command input prompt
  PS2="${COLOR_REGULAR}>${COLOR_DEFAULT} "
}

# ----------------------------------------------------------------------
#  AUTOCOMPLETE
# ----------------------------------------------------------------------

# OS X-specific autocompletions
if platformIsDarwin; then
  # if homebrew's bash_completion is installed, bring it in
  if [ -f "$(brew --prefix)/etc/bash_completion" ]; then
    # bash_completion sets and unsets a UNAME variable; this works around it
    TEMPUNAME=$UNAME
    . "$(brew --prefix)/etc/bash_completion"
    UNAME=$TEMPUNAME
    unset TEMPUNAME
  fi
  # Add `killall` tab completion for common apps - Borrowed from https://github.com/mathiasbynens/dotfiles/
  complete -o "nospace" -W "Adium Contacts Calendar Dock Finder Mail Safari iTunes SystemUIServer Terminal Twitter" killall
fi

# ----------------------------------------------------------------------
#  LS AND DIRCOLORS
# ----------------------------------------------------------------------

# main ls alias
LS="ls -h"   # `-h` enables "human" units for file sizes
LL="${LS}al" # `-a` shows all files, `-l` shows list in a long format
LD="${LS}d"  # `-d` shows directories as regular files (allows limiting display to current directory rather than listing contents of subdirectories)

if [ "$COREUTILS" = "BSD" ]; then

  # Use environment variable rather than alias to enable colours.
  export CLICOLOR="yes"

  # Configure ls colours
  #
  #                +-Directory (Cyan)
  #                | +-Symlink (Magenta)
  #                | | +-Socket (Magenta)
  #                | | | +-Pipe (Green)
  #                | | | | +-Executable (Magenta)
  #                | | | | | +-Block Special (Green on Cyan)
  #                | | | | | | +-Character Special (Green on Brown)
  #                | | | | | | | +-Executable with setuid set (Magenta on Red)
  #                | | | | | | | | +-Executable with setgid set (Magenta on Green)
  #                | | | | | | | | | +-Directory writable to others, with sticky bit (Black on Green)
  #                | | | | | | | | | | +-Directory writable to others, without sticky bit (Black on Brown)
  #                | | | | | | | | | | | 
  export LSCOLORS="GxfxFxcxFxcgcdfbfgacad"
  # See `man ls` on a Mac or FreeBSD system for info on this

  # Support for additional GNU Coreutils
  if [ "$GCOREUTILS" = "YES" ]; then
    # If the GNU Coreutils are included as "gls"

    # setup the main ls alias
    alias gls="g${LS} --color"

    # list all files in directory
    alias gll="g${LL} --color"

    # list dot files in directory
    alias gl.="g${LD} --color .*"
  fi

elif [ "$COREUTILS" = "GNU" ]; then

  # If GNU Coreutils has been detected, configure aliases to use `--color`

  LS="${LS} --color"
  LL="${LL} --color"
  LD="${LD} --color"

fi

# setup the main ls alias
alias ls="${LS}"

# list all files in directory
alias ll="${LL}"

# list dot files in directory
alias l.="${LD} .*"

# GNU ls' colours are defined in ~/.dircolors
eval $(dircolors -b ~/.dircolors 2>/dev/null)

# ----------------------------------------------------------------------
#  LESS
# ----------------------------------------------------------------------

export LESS='-RM'   # -R: print ANSI color escapes directly to the screen
                    # -M: use very verbose prompt, with pos/%

# ----------------------------------------------------------------------
#  COMMAND HISTORY
#  http://www.thegeekstuff.com/2008/08/15-examples-to-master-linux-command-line-history/
# ----------------------------------------------------------------------

# big history
export HISTSIZE=1000

# format history with timestamp
# 319  | 2010-06-02 09:02PM | reload
export HISTTIMEFORMAT="| %F %I:%M%p | "

# Save and reload the history after each command finishes
export PROMPT_COMMAND="history -a; history -r; $PROMPT_COMMAND"

# ignore repeat commands
export HISTCONTROL=erasedups

# ignore specific commands
export HISTIGNORE="&:cl:x:exit"

# ==============================================================================
# ALIASES & FUNCTIONS
# ==============================================================================

# ----------------------------------------------------------------------
#  CD, DIRECTORY NAVIGATION
# ----------------------------------------------------------------------

function profile() {
  case $1 in
    edit|ed|e)
      command $EDITOR $HOME/dotfiles
      ;;
    load|lo|l)
      source $HOME/.bash_profile
      ;;
    install|inst|in|i)
      command $HOME/dotfiles/install.sh && \
      profile load
      ;;
    update|up|u)
      cd $HOME/dotfiles && \
      command git stash && \
      command git fetch && \
      command git stash pop && \
      cd - && \
      profile install
      ;;
    *)
      echo "Usage: $0 <command>" && \
      echo && \
      echo "Commands:" && \
      echo "    edit, ed, e" && \
      echo "        Open the dotfiles directory in \"$EDITOR\"" && \
      echo && \
      echo "    load, lo, l" && \
      echo "        Reload the configuration (Applies only to bash_profile)" && \
      echo && \
      echo "    install, inst, in, i" && \
      echo "        Run the dotfiles installer again (to add new files)" && \
      echo && \
      echo "    update, up, u" && \
      echo "        Fetch updated version of dotfiles and install them"
      ;;
  esac
}
alias p="profile"

# supress bash_completion pwd on cd
function cd() {
  command cd "$@" >/dev/null;
}

# go to home directory
alias ~="cd ~"

# create a directory and cd into it
# http://www.thegeekstuff.com/2008/10/6-awesome-linux-cd-command-hacks-productivity-tip3-for-geeks/
function mkcd() {
  mkdir -p "$@" && eval cd "$@";
}

# retrieves the last (hopefully most relevant) IP address in the `ipls` list
function cip() {
  ipls | tail -1
}

if platformIsDarwin; then
  # Change working directory to the top-most Finder window location
  function cdf() { # short for `cdfinder`
    cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')"
  }
fi

# suppress "Boot" app in dock when running an app in the Play framework
if /usr/libexec/java_home >/dev/null 2>&1 && play --version >/dev/null 2>&1; then
  function play() {
    clear 2>/dev/null
    if [ $# -eq 0 ]; then
      # automatically "run" if there are no arguments
      printf "run\n" > /tmp/playrunner
      cat /tmp/playrunner - | _JAVA_OPTIONS="-Djava.awt.headless=true" command play
      rm /tmp/playrunner
    else
      _JAVA_OPTIONS="-Djava.awt.headless=true" command play $@
    fi

    # restore echo after play 2.1.3+ murders it (Java is great)
    stty echo
  }
fi

export ANT_OPTS="-Xms512m -Xmx512m -XX:MaxPermSize=1024m" # More RAM for Ant

# flash log tail function
alias fl="clear && tail -f -n 200 ~/Library/Preferences/Macromedia/Flash\ Player/Logs/flashlog.txt"

# coloured man pages
alias man="mansi"

alias rm!="rm -rf"

# close window
alias x="exit"
alias :q="exit"
# clear window
alias cl="clear"

# ----------------------------------------------------------------------
#  GIT
# ----------------------------------------------------------------------

# if hub is installed, enable it
if hub alias -s >/dev/null 2>&1; then
  eval "$(hub alias -s)"
fi

# ==============================================================================
# FINAL SETUP
# ==============================================================================

title_git

# Use the color prompt by default when interactive
test -n "$PS1" &&
prompt_color

# Load RVM into a shell session *as a function*
[[ -s "$HOME/.rvm/scripts/rvm" ]] && source "$HOME/.rvm/scripts/rvm"
